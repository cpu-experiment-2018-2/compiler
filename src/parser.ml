type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | FUN
  | EOF
  | RIGHT_ARROW
  | MINUS
  | PLUS
  | PLUS_ADHOC
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | AST
  | SLASH_DOT
  | SLASH
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (string)
  | LET
  | IN
  | REC
  | COMMA
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN

open Parsing;;
let _ = parse_error;;
# 2 "src/parser.mly"
open Syntax
exception ParseError
 
let getdebug () = 
    let p = (Parsing.symbol_start_pos ()) in
    let pos = 
    {
    line = p.Lexing.pos_lnum;
    col = p.Lexing.pos_cnum ;
    bol = p.Lexing.pos_bol;
    }
    in 
    {
        pos = 
        Source(pos)
    }
    let alpha() = 
        let s = genvar() in
        {
            name = s;
            debug = getdebug();
            ty = Type.TyVar(Type.genvar());
        }
# 65 "src/parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* FUN *);
    0 (* EOF *);
  262 (* RIGHT_ARROW *);
  263 (* MINUS *);
  264 (* PLUS *);
  265 (* PLUS_ADHOC *);
  266 (* MINUS_DOT *);
  267 (* PLUS_DOT *);
  268 (* AST_DOT *);
  269 (* AST *);
  270 (* SLASH_DOT *);
  271 (* SLASH *);
  272 (* EQUAL *);
  273 (* LESS_GREATER *);
  274 (* LESS_EQUAL *);
  275 (* GREATER_EQUAL *);
  276 (* LESS *);
  277 (* GREATER *);
  278 (* IF *);
  279 (* THEN *);
  280 (* ELSE *);
  282 (* LET *);
  283 (* IN *);
  284 (* REC *);
  285 (* COMMA *);
  286 (* DOT *);
  287 (* LESS_MINUS *);
  288 (* SEMICOLON *);
  289 (* LPAREN *);
  290 (* RPAREN *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  281 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\006\000\005\000\
\010\000\010\000\007\000\007\000\008\000\008\000\004\000\009\000\
\009\000\000\000"

let yylen = "\002\000\
\002\000\003\000\002\000\001\000\001\000\001\000\001\000\005\000\
\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\006\000\002\000\
\003\000\003\000\003\000\003\000\006\000\001\000\005\000\002\000\
\001\000\008\000\007\000\003\000\002\000\001\000\004\000\004\000\
\002\000\001\000\002\000\001\000\003\000\003\000\001\000\003\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\038\000\004\000\005\000\006\000\000\000\000\000\
\000\000\000\000\000\000\047\000\000\000\000\000\050\000\000\000\
\000\000\007\000\030\000\000\000\010\000\000\000\000\000\011\000\
\024\000\000\000\000\000\000\000\000\000\003\000\000\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\041\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\
\000\000\000\000\000\000\027\000\012\000\028\000\013\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\049\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\015\000\016\000\017\000\018\000\019\000\058\000\052\000\020\000\
\060\000\023\000"

let yysindex = "\002\000\
\119\255\000\000\000\000\000\000\000\000\000\000\119\255\238\254\
\119\255\119\255\119\255\000\000\236\254\106\255\000\000\079\002\
\132\255\000\000\000\000\244\254\000\000\238\254\012\255\000\000\
\000\000\133\002\238\254\238\254\006\255\000\000\175\255\000\000\
\119\255\119\255\119\255\119\255\119\255\119\255\119\255\119\255\
\119\255\119\255\119\255\119\255\119\255\119\255\119\255\119\255\
\119\255\246\254\001\255\069\255\119\255\000\000\119\255\119\255\
\238\254\253\254\003\255\231\254\119\255\000\000\015\255\015\255\
\015\255\015\255\015\255\000\000\000\000\000\000\000\000\066\255\
\066\255\066\255\066\255\066\255\066\255\030\003\237\002\119\255\
\000\255\001\255\030\003\237\002\159\002\018\255\119\255\238\254\
\238\254\020\255\185\002\203\255\119\255\119\255\119\255\237\002\
\000\000\000\000\119\255\119\255\026\255\105\002\007\003\237\002\
\211\002\237\002\119\255\000\000\119\255\007\003\237\002"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\097\000\000\000\000\000\153\000\000\000\250\254\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\180\000\000\000\035\000\125\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\208\000\236\000\
\023\001\057\001\091\001\000\000\000\000\000\000\000\000\119\001\
\147\001\175\001\202\001\221\001\241\001\248\000\190\001\000\000\
\000\000\069\000\002\002\029\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\035\002\
\000\000\000\000\000\000\000\000\001\000\000\000\017\002\032\255\
\000\000\037\002\000\000\000\000\000\000\023\002\049\002"

let yygindex = "\000\000\
\000\000\005\000\241\255\254\255\000\000\000\000\000\000\000\000\
\000\000\255\255"

let yytablesize = 1075
let yytable = "\042\000\
\008\000\051\000\001\000\089\000\012\000\022\000\012\000\027\000\
\090\000\042\000\029\000\021\000\028\000\024\000\025\000\026\000\
\053\000\055\000\031\000\022\000\054\000\061\000\080\000\087\000\
\057\000\059\000\038\000\039\000\040\000\041\000\081\000\088\000\
\093\000\095\000\044\000\099\000\082\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\022\000\086\000\
\107\000\083\000\039\000\084\000\085\000\000\000\000\000\000\000\
\000\000\091\000\000\000\000\000\043\000\004\000\005\000\006\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\
\041\000\000\000\000\000\000\000\092\000\097\000\098\000\000\000\
\000\000\000\000\000\000\096\000\000\000\012\000\000\000\000\000\
\009\000\102\000\103\000\104\000\000\000\014\000\000\000\105\000\
\106\000\003\000\004\000\005\000\006\000\007\000\008\000\110\000\
\009\000\111\000\000\000\010\000\000\000\000\000\003\000\004\000\
\005\000\006\000\007\000\008\000\032\000\009\000\000\000\011\000\
\010\000\000\000\012\000\013\000\004\000\005\000\006\000\000\000\
\000\000\000\000\014\000\030\000\011\000\000\000\000\000\012\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\
\033\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\050\000\000\000\000\000\014\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\037\000\000\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\049\000\016\000\
\062\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\
\000\000\000\000\049\000\014\000\101\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\000\008\000\008\000\000\000\000\000\000\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\015\000\008\000\
\008\000\008\000\000\000\008\000\000\000\008\000\008\000\000\000\
\008\000\008\000\008\000\044\000\044\000\044\000\000\000\000\000\
\000\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\026\000\044\000\044\000\044\000\000\000\044\000\000\000\044\000\
\000\000\000\000\044\000\044\000\044\000\043\000\043\000\043\000\
\000\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\025\000\043\000\043\000\043\000\000\000\043\000\
\000\000\043\000\000\000\000\000\043\000\043\000\043\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\017\000\009\000\
\009\000\000\000\000\000\009\000\000\000\009\000\000\000\000\000\
\009\000\000\000\009\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\020\000\032\000\032\000\000\000\000\000\032\000\
\000\000\032\000\000\000\000\000\032\000\000\000\032\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\018\000\033\000\
\033\000\000\000\000\000\033\000\000\000\000\000\000\000\000\000\
\033\000\000\000\033\000\037\000\037\000\036\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\019\000\037\000\037\000\000\000\000\000\037\000\000\000\
\037\000\000\000\000\000\037\000\000\000\037\000\016\000\016\000\
\016\000\016\000\016\000\000\000\021\000\000\000\000\000\016\000\
\016\000\016\000\016\000\016\000\016\000\000\000\016\000\016\000\
\000\000\000\000\016\000\000\000\016\000\000\000\000\000\016\000\
\022\000\016\000\014\000\014\000\014\000\014\000\014\000\000\000\
\000\000\000\000\000\000\014\000\014\000\014\000\014\000\014\000\
\014\000\045\000\014\000\014\000\000\000\000\000\014\000\000\000\
\014\000\000\000\000\000\014\000\000\000\014\000\046\000\046\000\
\023\000\000\000\046\000\000\000\046\000\000\000\035\000\046\000\
\000\000\046\000\000\000\000\000\040\000\015\000\015\000\015\000\
\015\000\015\000\031\000\000\000\029\000\000\000\015\000\015\000\
\015\000\015\000\015\000\015\000\000\000\015\000\015\000\000\000\
\034\000\015\000\000\000\015\000\000\000\000\000\015\000\000\000\
\015\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
\026\000\026\000\026\000\026\000\000\000\000\000\000\000\000\000\
\026\000\026\000\026\000\026\000\026\000\026\000\032\000\026\000\
\026\000\000\000\000\000\026\000\000\000\026\000\000\000\000\000\
\026\000\000\000\026\000\000\000\000\000\000\000\000\000\000\000\
\000\000\025\000\025\000\025\000\025\000\025\000\000\000\000\000\
\000\000\000\000\025\000\025\000\025\000\025\000\025\000\025\000\
\000\000\025\000\025\000\000\000\000\000\025\000\000\000\025\000\
\000\000\000\000\025\000\000\000\025\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\017\000\017\000\
\017\000\017\000\017\000\017\000\000\000\017\000\017\000\000\000\
\000\000\017\000\000\000\017\000\000\000\000\000\017\000\000\000\
\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\020\000\020\000\020\000\020\000\020\000\020\000\
\000\000\020\000\020\000\000\000\000\000\020\000\000\000\020\000\
\000\000\000\000\020\000\000\000\020\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\018\000\018\000\
\018\000\018\000\018\000\018\000\000\000\018\000\018\000\000\000\
\000\000\018\000\000\000\018\000\000\000\000\000\018\000\000\000\
\018\000\000\000\000\000\000\000\036\000\036\000\000\000\000\000\
\036\000\019\000\019\000\019\000\019\000\019\000\019\000\036\000\
\019\000\019\000\000\000\000\000\019\000\000\000\019\000\000\000\
\000\000\019\000\000\000\019\000\021\000\021\000\021\000\021\000\
\021\000\021\000\000\000\021\000\021\000\000\000\000\000\021\000\
\000\000\021\000\000\000\000\000\021\000\000\000\021\000\000\000\
\022\000\022\000\022\000\022\000\022\000\022\000\000\000\022\000\
\022\000\000\000\000\000\022\000\000\000\022\000\000\000\000\000\
\022\000\000\000\022\000\000\000\000\000\000\000\000\000\000\000\
\045\000\045\000\000\000\000\000\045\000\000\000\045\000\000\000\
\000\000\045\000\000\000\045\000\000\000\000\000\000\000\023\000\
\023\000\000\000\000\000\023\000\000\000\035\000\035\000\000\000\
\023\000\035\000\023\000\040\000\040\000\000\000\035\000\040\000\
\035\000\031\000\031\000\029\000\029\000\031\000\040\000\029\000\
\000\000\000\000\000\000\000\000\031\000\000\000\029\000\034\000\
\034\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\034\000\000\000\000\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\049\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\
\049\000\000\000\108\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\000\000\056\000\000\000\000\000\000\000\000\000\
\000\000\048\000\000\000\000\000\049\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\000\000\000\000\094\000\000\000\
\000\000\000\000\000\000\048\000\000\000\000\000\049\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\000\000\000\000\
\000\000\000\000\000\000\100\000\000\000\048\000\000\000\000\000\
\049\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\
\000\000\000\000\000\000\000\000\000\000\109\000\000\000\048\000\
\000\000\000\000\049\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\048\000\000\000\000\000\049\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\046\000\047\000"

let yycheck = "\006\001\
\000\000\017\000\001\000\029\001\025\001\008\000\025\001\028\001\
\034\001\016\001\013\000\007\000\033\001\009\000\010\000\011\000\
\029\001\006\001\014\000\022\000\022\000\016\001\033\001\027\001\
\027\000\028\000\012\001\013\001\014\001\015\001\030\001\029\001\
\033\001\016\001\000\000\016\001\052\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\049\000\057\000\057\000\
\031\001\053\000\027\001\055\000\056\000\255\255\255\255\255\255\
\255\255\061\000\255\255\255\255\000\000\001\001\002\001\003\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\255\255\255\255\255\255\080\000\088\000\089\000\255\255\
\255\255\255\255\255\255\087\000\255\255\025\001\255\255\255\255\
\000\000\093\000\094\000\095\000\255\255\033\001\255\255\099\000\
\100\000\000\001\001\001\002\001\003\001\004\001\005\001\107\000\
\007\001\109\000\255\255\010\001\255\255\255\255\000\001\001\001\
\002\001\003\001\004\001\005\001\000\000\007\001\255\255\022\001\
\010\001\255\255\025\001\026\001\001\001\002\001\003\001\255\255\
\255\255\255\255\033\001\034\001\022\001\255\255\255\255\025\001\
\026\001\255\255\255\255\255\255\255\255\255\255\255\255\033\001\
\000\000\255\255\255\255\255\255\025\001\255\255\255\255\255\255\
\255\255\030\001\255\255\255\255\033\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\255\255\255\255\032\001\000\000\
\034\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\029\001\
\255\255\255\255\032\001\000\000\034\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\255\255\255\255\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\000\000\023\001\
\024\001\025\001\255\255\027\001\255\255\029\001\030\001\255\255\
\032\001\033\001\034\001\001\001\002\001\003\001\255\255\255\255\
\255\255\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\000\000\023\001\024\001\025\001\255\255\027\001\255\255\029\001\
\255\255\255\255\032\001\033\001\034\001\001\001\002\001\003\001\
\255\255\255\255\255\255\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\000\000\023\001\024\001\025\001\255\255\027\001\
\255\255\029\001\255\255\255\255\032\001\033\001\034\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\000\000\023\001\
\024\001\255\255\255\255\027\001\255\255\029\001\255\255\255\255\
\032\001\255\255\034\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\000\000\023\001\024\001\255\255\255\255\027\001\
\255\255\029\001\255\255\255\255\032\001\255\255\034\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\000\000\023\001\
\024\001\255\255\255\255\027\001\255\255\255\255\255\255\255\255\
\032\001\255\255\034\001\008\001\009\001\000\000\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\000\000\023\001\024\001\255\255\255\255\027\001\255\255\
\029\001\255\255\255\255\032\001\255\255\034\001\007\001\008\001\
\009\001\010\001\011\001\255\255\000\000\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\023\001\024\001\
\255\255\255\255\027\001\255\255\029\001\255\255\255\255\032\001\
\000\000\034\001\007\001\008\001\009\001\010\001\011\001\255\255\
\255\255\255\255\255\255\016\001\017\001\018\001\019\001\020\001\
\021\001\000\000\023\001\024\001\255\255\255\255\027\001\255\255\
\029\001\255\255\255\255\032\001\255\255\034\001\023\001\024\001\
\000\000\255\255\027\001\255\255\029\001\255\255\000\000\032\001\
\255\255\034\001\255\255\255\255\000\000\007\001\008\001\009\001\
\010\001\011\001\000\000\255\255\000\000\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\023\001\024\001\255\255\
\000\000\027\001\255\255\029\001\255\255\255\255\032\001\255\255\
\034\001\255\255\255\255\255\255\255\255\255\255\255\255\007\001\
\008\001\009\001\010\001\011\001\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\000\000\023\001\
\024\001\255\255\255\255\027\001\255\255\029\001\255\255\255\255\
\032\001\255\255\034\001\255\255\255\255\255\255\255\255\255\255\
\255\255\007\001\008\001\009\001\010\001\011\001\255\255\255\255\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\023\001\024\001\255\255\255\255\027\001\255\255\029\001\
\255\255\255\255\032\001\255\255\034\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\023\001\024\001\255\255\
\255\255\027\001\255\255\029\001\255\255\255\255\032\001\255\255\
\034\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\023\001\024\001\255\255\255\255\027\001\255\255\029\001\
\255\255\255\255\032\001\255\255\034\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\023\001\024\001\255\255\
\255\255\027\001\255\255\029\001\255\255\255\255\032\001\255\255\
\034\001\255\255\255\255\255\255\023\001\024\001\255\255\255\255\
\027\001\016\001\017\001\018\001\019\001\020\001\021\001\034\001\
\023\001\024\001\255\255\255\255\027\001\255\255\029\001\255\255\
\255\255\032\001\255\255\034\001\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\023\001\024\001\255\255\255\255\027\001\
\255\255\029\001\255\255\255\255\032\001\255\255\034\001\255\255\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\023\001\
\024\001\255\255\255\255\027\001\255\255\029\001\255\255\255\255\
\032\001\255\255\034\001\255\255\255\255\255\255\255\255\255\255\
\023\001\024\001\255\255\255\255\027\001\255\255\029\001\255\255\
\255\255\032\001\255\255\034\001\255\255\255\255\255\255\023\001\
\024\001\255\255\255\255\027\001\255\255\023\001\024\001\255\255\
\032\001\027\001\034\001\023\001\024\001\255\255\032\001\027\001\
\034\001\023\001\024\001\023\001\024\001\027\001\034\001\027\001\
\255\255\255\255\255\255\255\255\034\001\255\255\034\001\023\001\
\024\001\255\255\255\255\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\034\001\255\255\255\255\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\255\255\255\255\032\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\255\255\255\255\
\032\001\255\255\034\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\029\001\255\255\255\255\032\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\024\001\255\255\
\255\255\255\255\255\255\029\001\255\255\255\255\032\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\255\255\255\255\
\255\255\255\255\255\255\027\001\255\255\029\001\255\255\255\255\
\032\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\255\255\255\255\255\255\255\255\255\255\027\001\255\255\029\001\
\255\255\255\255\032\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\029\001\255\255\255\255\032\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\029\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001"

let yynames_const = "\
  NOT\000\
  FUN\000\
  EOF\000\
  RIGHT_ARROW\000\
  MINUS\000\
  PLUS\000\
  PLUS_ADHOC\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST_DOT\000\
  AST\000\
  SLASH_DOT\000\
  SLASH\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 83 "src/parser.mly"
              ( _1 )
# 504 "src/parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 88 "src/parser.mly"
    ( _2 )
# 511 "src/parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 90 "src/parser.mly"
    ( Const (CUnit ,getdebug()))
# 517 "src/parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 92 "src/parser.mly"
    ( Const (CBool(_1),getdebug()))
# 524 "src/parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 94 "src/parser.mly"
    ( Const (CInt(_1),getdebug()) )
# 531 "src/parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 96 "src/parser.mly"
    ( Const (CFloat(_1),getdebug()) )
# 538 "src/parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 98 "src/parser.mly"
    ( Var(_1 ,getdebug()))
# 545 "src/parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 100 "src/parser.mly"
    ( Op(ArrayGet(TyVar(Type.genvar())),[_1;_4],getdebug() ))
# 553 "src/parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 103 "src/parser.mly"
    ( _1)
# 560 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 106 "src/parser.mly"
    ( Op(Primitive(Not),[_2],getdebug() ))
# 567 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 109 "src/parser.mly"
    ( match _2 with
    | Const(CFloat(f),_) -> Const(CFloat(-.f),getdebug())
    | e -> Op(Primitive(Neg),[e],getdebug()))
# 576 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 113 "src/parser.mly"
    ( Op(Primitive(Mul), [_1; _3],getdebug()))
# 584 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 115 "src/parser.mly"
    ( Op(Primitive(Div), [_1; _3],getdebug()))
# 592 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 117 "src/parser.mly"
    ( Op(Primitive(Add), [_1; _3],getdebug()))
# 600 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 119 "src/parser.mly"
    ( Op(Adhoc(AAdd), [_1; _3],getdebug()))
# 608 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 121 "src/parser.mly"
    ( Op(Primitive(Sub), [_1; _3],getdebug()))
# 616 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 123 "src/parser.mly"
    ( Op(Primitive(EQ), [_1; _3],getdebug()) )
# 624 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 125 "src/parser.mly"
    ( Op(Primitive(LE),[_1; _3],getdebug()))
# 632 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 127 "src/parser.mly"
    ( Op(Primitive(GE),[_1; _3],getdebug()))
# 640 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 129 "src/parser.mly"
    ( Op(Primitive(Not),[(Op(Primitive(EQ),[_1; _3] ,getdebug()))],getdebug()) )
# 648 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 131 "src/parser.mly"
    ( Op(Primitive(Not),[(Op(Primitive(GE),[_1; _3] ,getdebug()))],getdebug()))
# 656 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 133 "src/parser.mly"
    ( Op(Primitive(Not),[(Op(Primitive(LE),[_1; _3] ,getdebug()))], getdebug()))
# 664 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 138 "src/parser.mly"
    ( If(_2, _4, _6,getdebug()))
# 673 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 141 "src/parser.mly"
    ( Op(Primitive(FNeg), [_2],getdebug()))
# 680 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 143 "src/parser.mly"
    ( Op(Primitive(FAdd), [_1; _3],getdebug()))
# 688 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 145 "src/parser.mly"
    ( Op(Primitive(FSub), [_1; _3],getdebug()))
# 696 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 148 "src/parser.mly"
    ( Op(Primitive(FMul), [_1; _3],getdebug()))
# 704 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 150 "src/parser.mly"
    ( Op(Primitive(FDiv), [_1; _3],getdebug()))
# 712 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'id) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 153 "src/parser.mly"
    ( Let(_2, _4, _6,getdebug()))
# 721 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'anonymousf) in
    Obj.repr(
# 154 "src/parser.mly"
             (_1)
# 728 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 157 "src/parser.mly"
    ( 
        LetRec(_3, _5,getdebug()) )
# 737 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 161 "src/parser.mly"
    ( App(_1, _2, getdebug()))
# 745 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 164 "src/parser.mly"
    ( Tuple(_1,getdebug()))
# 752 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 166 "src/parser.mly"
    ( 

       
        let p =  alpha() in
        let init = List.length _3 - 1 in
        let all = List.length _3 in
        let d = getdebug() in
        let e' = List.fold_right (fun x (counter,acc) ->
            (counter - 1, Let(x,  Op(Projection (counter,all, Type.TyVar(Type.genvar())), [Var(p,d)], d), acc,d))
         ) 
         _3 (init, _8)
         in
        Let(p,_6, snd e', d) 
    )
# 774 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 181 "src/parser.mly"
    ( Op(ArrayPut (Type.TyVar(Type.genvar())),[_1; _4; _7],getdebug()))
# 783 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 184 "src/parser.mly"
    ( 
        Let(alpha(), _1, _3 ,getdebug()))
# 792 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 186 "src/parser.mly"
                (_1)
# 799 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 188 "src/parser.mly"
    (
    let lex = (Parsing.symbol_end_pos ()).Lexing.pos_lnum in
         failwith ("syntax error near line " ^ (string_of_int lex))
    )
# 808 "src/parser.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 195 "src/parser.mly"
    ( { f = _1; args = _2 ; body =  _4; info = getdebug() } )
# 817 "src/parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 199 "src/parser.mly"
    ( 
        let name = alpha() in 
        LetRec({f = name; args = _2; body = _4; info = getdebug() }, Var(name,getdebug()), getdebug())
    )
# 828 "src/parser.ml"
               : 'anonymousf))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'id) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 206 "src/parser.mly"
    ( _1 :: _2 )
# 836 "src/parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 208 "src/parser.mly"
    ( [_1] )
# 843 "src/parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 213 "src/parser.mly"
    ( _1 @ [_2] )
# 851 "src/parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 216 "src/parser.mly"
    ( [_1] )
# 858 "src/parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 220 "src/parser.mly"
    ( _1 @ [_3] )
# 866 "src/parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 222 "src/parser.mly"
    ( [_1; _3] )
# 874 "src/parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 225 "src/parser.mly"
    (
        {
        name = _1;
        debug = getdebug();
        ty = Type.TyVar(Type.genvar());
        }
    )
# 887 "src/parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 234 "src/parser.mly"
    ( _1 @ [_3] )
# 895 "src/parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 236 "src/parser.mly"
    ([_1; _3] )
# 903 "src/parser.ml"
               : 'pat))
(* Entry top_exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let top_exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
