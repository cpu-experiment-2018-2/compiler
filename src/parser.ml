type token =
  | BOOL of bool
  | INT of int
  | FLOAT of float
  | NOT
  | FUN
  | EOF
  | RIGHT_ARROW
  | MINUS
  | PLUS
  | PLUS_ADHOC
  | MINUS_DOT
  | PLUS_DOT
  | AST_DOT
  | AST
  | SLASH_DOT
  | SLASH
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of string
  | LET
  | IN
  | REC
  | COMMA
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN

open Parsing

let _ = parse_error

open Syntax

exception ParseError

let getdebug () =
  let p = Parsing.symbol_start_pos () in
  let pos =
    {line= p.Lexing.pos_lnum; col= p.Lexing.pos_cnum; bol= p.Lexing.pos_bol}
  in
  {pos= Source pos}

let alpha () =
  let s = genvar () in
  {name= s; debug= getdebug (); ty= Type.TyVar (Type.genvar ())}

let yytransl_const =
  [| 260 (* NOT *)
   ; 261 (* FUN *)
   ; 0 (* EOF *)
   ; 262 (* RIGHT_ARROW *)
   ; 263 (* MINUS *)
   ; 264 (* PLUS *)
   ; 265 (* PLUS_ADHOC *)
   ; 266 (* MINUS_DOT *)
   ; 267 (* PLUS_DOT *)
   ; 268 (* AST_DOT *)
   ; 269 (* AST *)
   ; 270 (* SLASH_DOT *)
   ; 271 (* SLASH *)
   ; 272 (* EQUAL *)
   ; 273 (* LESS_GREATER *)
   ; 274 (* LESS_EQUAL *)
   ; 275 (* GREATER_EQUAL *)
   ; 276 (* LESS *)
   ; 277 (* GREATER *)
   ; 278 (* IF *)
   ; 279 (* THEN *)
   ; 280 (* ELSE *)
   ; 282 (* LET *)
   ; 283 (* IN *)
   ; 284 (* REC *)
   ; 285 (* COMMA *)
   ; 286 (* DOT *)
   ; 287 (* LESS_MINUS *)
   ; 288 (* SEMICOLON *)
   ; 289 (* LPAREN *)
   ; 290 (* RPAREN *)
   ; 0 |]

let yytransl_block =
  [|257 (* BOOL *); 258 (* INT *); 259 (* FLOAT *); 281 (* IDENT *); 0|]

let yylhs =
  "\255\255\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\006\000\005\000\010\000\010\000\007\000\007\000\008\000\008\000\004\000\009\000\009\000\000\000"

let yylen =
  "\002\000\002\000\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\006\000\002\000\003\000\003\000\003\000\003\000\006\000\001\000\005\000\002\000\001\000\008\000\007\000\003\000\002\000\001\000\004\000\004\000\002\000\001\000\002\000\001\000\003\000\003\000\001\000\003\000\003\000\002\000"

let yydefred =


let yydgoto =
  "\002\000\015\000\016\000\017\000\018\000\019\000\058\000\052\000\020\000\060\000\023\000"

let yysindex =


let yyrindex =


let yygindex =
  "\000\000\000\000\005\000\241\255\254\255\000\000\000\000\000\000\000\000\000\000\255\255"

let yytablesize = 1075

let yytable =
  "\042\000\008\000\051\000\001\000\089\000\012\000\022\000\012\000\027\000\090\000\042\000\029\000\021\000\028\000\024\000\025\000\026\000\053\000\055\000\031\000\022\000\054\000\061\000\080\000\087\000\057\000\059\000\038\000\039\000\040\000\041\000\081\000\088\000\093\000\095\000\044\000\099\000\082\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\078\000\079\000\022\000\086\000\107\000\083\000\039\000\084\000\085\000\000\000\000\000\000\000\000\000\091\000\000\000\000\000\043\000\004\000\005\000\006\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\000\000\000\000\000\000\092\000\097\000\098\000\000\000\000\000\000\000\000\000\096\000\000\000\012\000\000\000\000\000\009\000\102\000\103\000\104\000\000\000\014\000\000\000\105\000\106\000\003\000\004\000\005\000\006\000\007\000\008\000\110\000\009\000\111\000\000\000\010\000\000\000\000\000\003\000\004\000\005\000\006\000\007\000\008\000\032\000\009\000\000\000\011\000\010\000\000\000\012\000\013\000\004\000\005\000\006\000\000\000\000\000\000\000\014\000\030\000\011\000\000\000\000\000\012\000\013\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\033\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\050\000\000\000\000\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\049\000\016\000\062\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\049\000\014\000\101\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\008\000\008\000\000\000\000\000\000\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\015\000\008\000\008\000\008\000\000\000\008\000\000\000\008\000\008\000\000\000\008\000\008\000\008\000\044\000\044\000\044\000\000\000\000\000\000\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\026\000\044\000\044\000\044\000\000\000\044\000\000\000\044\000\000\000\000\000\044\000\044\000\044\000\043\000\043\000\043\000\000\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\025\000\043\000\043\000\043\000\000\000\043\000\000\000\043\000\000\000\000\000\043\000\043\000\043\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\017\000\009\000\009\000\000\000\000\000\009\000\000\000\009\000\000\000\000\000\009\000\000\000\009\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\020\000\032\000\032\000\000\000\000\000\032\000\000\000\032\000\000\000\000\000\032\000\000\000\032\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\018\000\033\000\033\000\000\000\000\000\033\000\000\000\000\000\000\000\000\000\033\000\000\000\033\000\037\000\037\000\036\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\019\000\037\000\037\000\000\000\000\000\037\000\000\000\037\000\000\000\000\000\037\000\000\000\037\000\016\000\016\000\016\000\016\000\016\000\000\000\021\000\000\000\000\000\016\000\016\000\016\000\016\000\016\000\016\000\000\000\016\000\016\000\000\000\000\000\016\000\000\000\016\000\000\000\000\000\016\000\022\000\016\000\014\000\014\000\014\000\014\000\014\000\000\000\000\000\000\000\000\000\014\000\014\000\014\000\014\000\014\000\014\000\045\000\014\000\014\000\000\000\000\000\014\000\000\000\014\000\000\000\000\000\014\000\000\000\014\000\046\000\046\000\023\000\000\000\046\000\000\000\046\000\000\000\035\000\046\000\000\000\046\000\000\000\000\000\040\000\015\000\015\000\015\000\015\000\015\000\031\000\000\000\029\000\000\000\015\000\015\000\015\000\015\000\015\000\015\000\000\000\015\000\015\000\000\000\034\000\015\000\000\000\015\000\000\000\000\000\015\000\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\026\000\026\000\026\000\026\000\000\000\000\000\000\000\000\000\026\000\026\000\026\000\026\000\026\000\026\000\032\000\026\000\026\000\000\000\000\000\026\000\000\000\026\000\000\000\000\000\026\000\000\000\026\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\025\000\025\000\025\000\025\000\000\000\000\000\000\000\000\000\025\000\025\000\025\000\025\000\025\000\025\000\000\000\025\000\025\000\000\000\000\000\025\000\000\000\025\000\000\000\000\000\025\000\000\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\017\000\017\000\017\000\017\000\017\000\000\000\017\000\017\000\000\000\000\000\017\000\000\000\017\000\000\000\000\000\017\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\020\000\020\000\020\000\020\000\020\000\000\000\020\000\020\000\000\000\000\000\020\000\000\000\020\000\000\000\000\000\020\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\018\000\018\000\018\000\018\000\018\000\000\000\018\000\018\000\000\000\000\000\018\000\000\000\018\000\000\000\000\000\018\000\000\000\018\000\000\000\000\000\000\000\036\000\036\000\000\000\000\000\036\000\019\000\019\000\019\000\019\000\019\000\019\000\036\000\019\000\019\000\000\000\000\000\019\000\000\000\019\000\000\000\000\000\019\000\000\000\019\000\021\000\021\000\021\000\021\000\021\000\021\000\000\000\021\000\021\000\000\000\000\000\021\000\000\000\021\000\000\000\000\000\021\000\000\000\021\000\000\000\022\000\022\000\022\000\022\000\022\000\022\000\000\000\022\000\022\000\000\000\000\000\022\000\000\000\022\000\000\000\000\000\022\000\000\000\022\000\000\000\000\000\000\000\000\000\000\000\045\000\045\000\000\000\000\000\045\000\000\000\045\000\000\000\000\000\045\000\000\000\045\000\000\000\000\000\000\000\023\000\023\000\000\000\000\000\023\000\000\000\035\000\035\000\000\000\023\000\035\000\023\000\040\000\040\000\000\000\035\000\040\000\035\000\031\000\031\000\029\000\029\000\031\000\040\000\029\000\000\000\000\000\000\000\000\000\031\000\000\000\029\000\034\000\034\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\034\000\000\000\000\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\049\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\049\000\000\000\108\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\056\000\000\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\049\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\000\000\094\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\049\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\000\000\000\000\000\000\000\000\100\000\000\000\048\000\000\000\000\000\049\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\000\000\000\000\000\000\000\000\109\000\000\000\048\000\000\000\000\000\049\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\000\000\000\000\049\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\046\000\047\000"

let yycheck =


let yynames_const =
  "NOT\000FUN\000EOF\000RIGHT_ARROW\000MINUS\000PLUS\000PLUS_ADHOC\000MINUS_DOT\000PLUS_DOT\000AST_DOT\000AST\000SLASH_DOT\000SLASH\000EQUAL\000LESS_GREATER\000LESS_EQUAL\000GREATER_EQUAL\000LESS\000GREATER\000IF\000THEN\000ELSE\000LET\000IN\000REC\000COMMA\000DOT\000LESS_MINUS\000SEMICOLON\000LPAREN\000RPAREN\000"

let yynames_block = "BOOL\000INT\000FLOAT\000IDENT\000"

let yyact =
  [| (fun _ -> failwith "parser")
   ; (fun __caml_parser_env ->
       let _1 : 'exp = Parsing.peek_val __caml_parser_env 1 in
       Obj.repr (_1 : Syntax.t) )
   ; (fun __caml_parser_env ->
       let _2 : 'exp = Parsing.peek_val __caml_parser_env 1 in
       Obj.repr (_2 : 'simple_exp) )
   ; (fun __caml_parser_env ->
       Obj.repr (Const (CUnit, getdebug ()) : 'simple_exp) )
   ; (fun __caml_parser_env ->
       let _1 : bool = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Const (CBool _1, getdebug ()) : 'simple_exp) )
   ; (fun __caml_parser_env ->
       let _1 : int = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Const (CInt _1, getdebug ()) : 'simple_exp) )
   ; (fun __caml_parser_env ->
       let _1 : float = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Const (CFloat _1, getdebug ()) : 'simple_exp) )
   ; (fun __caml_parser_env ->
       let _1 : 'id = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Var (_1, getdebug ()) : 'simple_exp) )
   ; (fun __caml_parser_env ->
       let _1 : 'simple_exp = Parsing.peek_val __caml_parser_env 4 in
       let _4 : 'exp = Parsing.peek_val __caml_parser_env 1 in
       Obj.repr
         ( Op (ArrayGet (TyVar (Type.genvar ())), [_1; _4], getdebug ())
           : 'simple_exp ) )
   ; (fun __caml_parser_env ->
       let _1 : 'simple_exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (_1 : 'exp) )
   ; (fun __caml_parser_env ->
       let _2 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Op (Primitive Not, [_2], getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _2 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr
         ( match _2 with
           | Const (CFloat f, _) -> Const (CFloat (-.f), getdebug ())
           | e -> Op (Primitive Neg, [e], getdebug ())
           : 'exp ) )
   ; (fun __caml_parser_env ->
       let _1 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Op (Primitive Mul, [_1; _3], getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _1 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Op (Primitive Div, [_1; _3], getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _1 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Op (Primitive Add, [_1; _3], getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _1 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Op (Adhoc AAdd, [_1; _3], getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _1 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Op (Primitive Sub, [_1; _3], getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _1 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Op (Primitive EQ, [_1; _3], getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _1 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Op (Primitive LE, [_1; _3], getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _1 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Op (Primitive GE, [_1; _3], getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _1 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr
         ( Op
             ( Primitive Not
             , [Op (Primitive EQ, [_1; _3], getdebug ())]
             , getdebug () )
           : 'exp ) )
   ; (fun __caml_parser_env ->
       let _1 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr
         ( Op
             ( Primitive Not
             , [Op (Primitive GE, [_1; _3], getdebug ())]
             , getdebug () )
           : 'exp ) )
   ; (fun __caml_parser_env ->
       let _1 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr
         ( Op
             ( Primitive Not
             , [Op (Primitive LE, [_1; _3], getdebug ())]
             , getdebug () )
           : 'exp ) )
   ; (fun __caml_parser_env ->
       let _2 : 'exp = Parsing.peek_val __caml_parser_env 4 in
       let _4 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _6 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (If (_2, _4, _6, getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _2 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Op (Primitive FNeg, [_2], getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _1 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Op (Primitive FAdd, [_1; _3], getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _1 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Op (Primitive FSub, [_1; _3], getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _1 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Op (Primitive FMul, [_1; _3], getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _1 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Op (Primitive FDiv, [_1; _3], getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _2 : 'id = Parsing.peek_val __caml_parser_env 4 in
       let _4 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _6 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Let (_2, _4, _6, getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _1 : 'anonymousf = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (_1 : 'exp) )
   ; (fun __caml_parser_env ->
       let _3 : 'fundef = Parsing.peek_val __caml_parser_env 2 in
       let _5 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (LetRec (_3, _5, getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _1 : 'simple_exp = Parsing.peek_val __caml_parser_env 1 in
       let _2 : 'actual_args = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (App (_1, _2, getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _1 : 'elems = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Tuple (_1, getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _3 : 'pat = Parsing.peek_val __caml_parser_env 5 in
       let _6 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _8 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr
         ( let p = alpha () in
           let init = List.length _3 - 1 in
           let all = List.length _3 in
           let d = getdebug () in
           let e' =
             List.fold_right
               (fun x (counter, acc) ->
                 ( counter - 1
                 , Let
                     ( x
                     , Op
                         ( Projection
                             (counter, all, Type.TyVar (Type.genvar ()))
                         , [Var (p, d)]
                         , d )
                     , acc
                     , d ) ) )
               _3 (init, _8)
           in
           Let (p, _6, snd e', d)
           : 'exp ) )
   ; (fun __caml_parser_env ->
       let _1 : 'simple_exp = Parsing.peek_val __caml_parser_env 6 in
       let _4 : 'exp = Parsing.peek_val __caml_parser_env 3 in
       let _7 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr
         ( Op
             (ArrayPut (Type.TyVar (Type.genvar ())), [_1; _4; _7], getdebug ())
           : 'exp ) )
   ; (fun __caml_parser_env ->
       let _1 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (Let (alpha (), _1, _3, getdebug ()) : 'exp) )
   ; (fun __caml_parser_env ->
       let _1 : 'exp = Parsing.peek_val __caml_parser_env 1 in
       Obj.repr (_1 : 'exp) )
   ; (fun __caml_parser_env ->
       Obj.repr
         ( let lex = (Parsing.symbol_end_pos ()).Lexing.pos_lnum in
           failwith ("syntax error near line " ^ string_of_int lex)
           : 'exp ) )
   ; (fun __caml_parser_env ->
       let _1 : 'id = Parsing.peek_val __caml_parser_env 3 in
       let _2 : 'formal_args = Parsing.peek_val __caml_parser_env 2 in
       let _4 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr ({f= _1; args= _2; body= _4; info= getdebug ()} : 'fundef) )
   ; (fun __caml_parser_env ->
       let _2 : 'formal_args = Parsing.peek_val __caml_parser_env 2 in
       let _4 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr
         ( let name = alpha () in
           LetRec
             ( {f= name; args= _2; body= _4; info= getdebug ()}
             , Var (name, getdebug ())
             , getdebug () )
           : 'anonymousf ) )
   ; (fun __caml_parser_env ->
       let _1 : 'id = Parsing.peek_val __caml_parser_env 1 in
       let _2 : 'formal_args = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (_1 :: _2 : 'formal_args) )
   ; (fun __caml_parser_env ->
       let _1 : 'id = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr ([_1] : 'formal_args) )
   ; (fun __caml_parser_env ->
       let _1 : 'actual_args = Parsing.peek_val __caml_parser_env 1 in
       let _2 : 'simple_exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (_1 @ [_2] : 'actual_args) )
   ; (fun __caml_parser_env ->
       let _1 : 'simple_exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr ([_1] : 'actual_args) )
   ; (fun __caml_parser_env ->
       let _1 : 'elems = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (_1 @ [_3] : 'elems) )
   ; (fun __caml_parser_env ->
       let _1 : 'exp = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'exp = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr ([_1; _3] : 'elems) )
   ; (fun __caml_parser_env ->
       let _1 : string = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr
         ({name= _1; debug= getdebug (); ty= Type.TyVar (Type.genvar ())} : 'id)
       )
   ; (fun __caml_parser_env ->
       let _1 : 'pat = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'id = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr (_1 @ [_3] : 'pat) )
   ; (fun __caml_parser_env ->
       let _1 : 'id = Parsing.peek_val __caml_parser_env 2 in
       let _3 : 'id = Parsing.peek_val __caml_parser_env 0 in
       Obj.repr ([_1; _3] : 'pat) )
     (* Entry top_exp *)
   ; (fun __caml_parser_env ->
       raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)) ) |]

let yytables =
  { Parsing.actions= yyact
  ; Parsing.transl_const= yytransl_const
  ; Parsing.transl_block= yytransl_block
  ; Parsing.lhs= yylhs
  ; Parsing.len= yylen
  ; Parsing.defred= yydefred
  ; Parsing.dgoto= yydgoto
  ; Parsing.sindex= yysindex
  ; Parsing.rindex= yyrindex
  ; Parsing.gindex= yygindex
  ; Parsing.tablesize= yytablesize
  ; Parsing.table= yytable
  ; Parsing.check= yycheck
  ; Parsing.error_function= parse_error
  ; Parsing.names_const= yynames_const
  ; Parsing.names_block= yynames_block }

let top_exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) :
    Syntax.t =
  Parsing.yyparse yytables 1 lexfun lexbuf
