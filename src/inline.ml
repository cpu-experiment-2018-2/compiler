(* open Knormal *)
(* let threshold = 10 *)
(* let rec size = function *)
(*     | If(_,_,_,e1,e2,_)  *)
(*     | Let(_,e1,e2,_) *)
(*     | LetRec({body=e1}, e2,_) ->  *)
(*             1 + size e1 + size e2 *)
(*     | LetTuple(_,e1,_) -> 1 + size e1 *)
(*     | _ -> 1 *)
(*  *)
(* let rec inine env e =   *)
(*     match e with *)
(*     | If(cmp, x,y,e1,e2,d) ->  *)
(*         If(cmp,x,y,inine env e1,inline env e2,d) *)
(*     |Let(v,e1,e2,d) ->  *)
(*             Let(v, inine env e1,inline env e2,d) *)
(*     | LetRec(fd, e1,d) ->  *)
(*           let newenv = if size fd.body <  threshold then env else (fd.name, fd) :: env in  *)
(*           LetRec( *)
(*               { *)
(*                   fd with *)
(*                   body = inline  newenv fd.body; *)
(*               } *)
(*                   , inline newenv e1, d) *)
(*     | App(y,ys,d) when List.exists (fun x -> x.name = y.name) env -> *)
(*             let fd = List.assoc y.name env in  *)
(*             let env' =  *)
(*                 List.fd.args *)
(*  *)
(*  *)
